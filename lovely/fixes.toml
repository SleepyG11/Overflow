[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = '''
local debugplus = require("debugplus.core")
debugplus.handleKeys(self, key, dt)
'''
position = "at"
payload = '''
local debugplus = require("debugplus.core")
local ref = debugplus.handleKeys
debugplus.handleKeys = function(controller, key, dt)
    if controller.hovering.target and controller.hovering.target:is(Card) then
        local _card = controller.hovering.target
        if key == "c" then
            local _area
            if _card.ability.set == 'Joker' then
                _area = G.jokers
            elseif _card.playing_card then
                if G.hand and G.hand.config.card_count ~= 0 then
                    _area = G.hand
                else 
                    _area = G.deck
                end
            elseif _card.ability.consumeable then
                _area = G.consumeables
            end
            if _area == nil then
                return print("Error: Trying to dup card without an area")
            end
            local new_card = copy_card(_card, nil, nil, _card.playing_card, nil, true)
            new_card:add_to_deck()
            if _card.playing_card then
                table.insert(G.playing_cards, new_card)
            end
            _area:emplace(new_card)
        else
            ref(controller, key, dt)
        end
    end
end
debugplus.handleKeys(self, key, dt)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
e.config.ref_table:use_consumeable(area)
'''
position = "at"
payload = '''
local amt = e.config.ref_table.ability.overflow_used_amount
if to_big(amt or 1) <= to_big(1) then
    e.config.ref_table:use_consumeable(area)
else
    local num = amt
    if Overflow.bulk_use_caps[e.config.ref_table.config.center.key] then
        num = Overflow.bulk_use_caps[e.config.ref_table.config.center.key](e.config.ref_table, e.config.ref_table.area, nil, num)
    end
    if e.config.ref_table.config.center.bulk_use_cap then
        num = e.config.ref_table.config.center:bulk_use_cap(e.config.ref_table, e.config.ref_table.area, nil, num)
    end
    Overflow.bulk_use(e.config.ref_table, area, num)
    if to_big(amt) - to_big(num) > to_big(0) then
        local mod = G.GAME.modifiers.entr_twisted
        G.GAME.modifiers.entr_twisted = nil
        local new_card = copy_card(e.config.ref_table)
        G.GAME.modifiers.entr_twisted = mod
        G.E_MANAGER:add_event(Event({
            trigger = 'after',
            delay = 0.3,
            func = function()
                new_card:add_to_deck()
                G.consumeables:emplace(new_card)
                new_card.ability.immutable = new_card.ability.immutable or {}
                new_card.ability.immutable.overflow_amount = to_big(amt) - to_big(num)
                new_card.ability.immutable.overflow_amount_text = number_format(new_card.ability.immutable.overflow_amount)
                new_card.bypass = true
                if to_big(new_card.ability.immutable.overflow_amount or 0) > to_big(1) then
                    new_card:create_overflow_ui()
                end
                new_card.bypass = nil
                return true
            end
        }))
    end
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
  G.FUNCS.use_card = function(e, mute, nosave)
'''
position = "at"
payload = '''
  G.FUNCS.use_card = function(e, mute, nosave, amt)
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.load()'''
position = "before"
payload = '''
Overflow = {}
Overflow.blacklist = {

}
Overflow.mass_use_sets = {
    Planet = true
}
Overflow.bulk_use_caps = {
}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''self.config.card_count = #self.cards'''
position = "at"
payload = '''
self.config.card_count = #self.cards
if Overflow.config.fix_slots then
    if self == G.consumeables then
        for i, v in ipairs(self.cards) do   
            if not v.edition or not v.edition.card_limit then
                if v.ability and v.ability.immutable and v.ability.immutable.overflow_amount then
                    if to_big(v.ability.immutable.overflow_amount) > to_big(1) then
                        self.config.card_count = self.config.card_count + math.min(1e100, to_number(v.ability.immutable.overflow_amount) - 1)
                    end
                end
            end
        end
    end
    if to_big(self.config.card_count) > to_big(1e100) then
        self.config.card_count = 1e100
    end
end
'''
match_indent = true